import express, { Express } from "express";
import { db } from "./database/models";
import SequelizeConnection from "./database/config/sequelizeConnection";
import * as configDb from "./database/config/config.json";
import { WebServerOptions } from "./server/resources/webServerOptions";
import { api as databaseApi } from "./database/database.router";
import { api as serverApi } from "./server/server.router";
import axios from "axios";
import Preferences from "preferences";
import swaggerUi from "swagger-ui-express";
import * as swaggerFileServer from "../xtvision_server_openApi_autogenerated.json";
import * as swaggerFileDatabase from "../xtvision_database_openApi_autogenerated.json";
import cors from "cors";
import { morganMiddleware } from "../morgan.middleware";
import { logger } from "../logger";
import config, { isHttpS, hostname } from "./server/resources/config";
import {
  AUTH_MODE,
  BASE64,
  BASIC,
  NODE_ENV_PROD,
} from "./server/resources/constants";
import { checkAuthentication } from "./server/middlewares/checkAuthentication.server.middleware";
import path from "path";
import { scheduleDatabaseJobs } from "./server/jobs/initScheduling.server.job";
import { initPrefParameters } from "./server/jobs/initPrefParameters.server.job";
import fs from "fs";
import https from "https";
import http from "http";
import { userActionMiddleware } from "./server/middlewares/userAction.middleware";

export const prefs = new Preferences("xtvision.prefs", {
  databaseAuth: "",
  counter: "",
  value: "",
  maxBackups: 10,
  auth_mode: AUTH_MODE.OAUTH2_LOCAL,
  auth_authorize_url: "",
  auth_token_url: "",
  auth_authenticate_url: "",
  auth_logout_url: "",
  auth_users_url: "",
  auth_client_id: "",
  auth_client_secret: "",
  auth_redirect_uri: "",
  auth_token_username_key: "",
  auth_token_username_split: "",
});

// TODO DDC : add other SSL certificates for Keycloak, RabbitMQ, CastelSuite,...
// SSL credentials for https
export const credentials = isHttpS
  ? {
      ca: fs.readFileSync(
        `${__dirname}/../openssl/server/xtvisionCA.crt`,
        "utf8"
      ),
      key: fs.readFileSync(`${__dirname}/../openssl/${hostname}.key`, "utf8"),
      cert: fs.readFileSync(`${__dirname}/../openssl/${hostname}.crt`, "utf8"),
    }
  : {};

// axios instance with https agent for https requests
export const customAxios = isHttpS
  ? axios.create({
      httpsAgent: new https.Agent({
        requestCert: true,
        rejectUnauthorized: true,
        cert: credentials.cert,
        ca: credentials.ca,
      }),
    })
  : axios;

export class WebServer {
  app: Express;
  options: WebServerOptions = {
    port: 5001,
  };

  server: http.Server | https.Server;

  constructor(options?: WebServerOptions) {
    Object.assign(this.options, options);
    this.app = express();
    this.server = isHttpS
      ? https.createServer(credentials, this.app)
      : http.createServer(this.app);
  }

  init() {
    const app = this.app;

    // Init databaseAuth for databases API
    prefs.databaseAuth =
      BASIC +
      Buffer.from(
        (configDb as any)[process.env.NODE_ENV!].databaseConfig.username +
          ":" +
          (configDb as any)[process.env.NODE_ENV!].databaseConfig.password
      ).toString(BASE64);

    (async () => {
      await SequelizeConnection.connect();
      // Once connection is authenticated, sequelize will sync the database models and migrate if needed
      await db.sequelizeDbConfig.sync({
        force: false,
      });
      await db.sequelizeDbExploit.sync({
        force: false,
      });
      await db.sequelizeDbSystem.sync({
        force: false,
      });
      await SequelizeConnection.migrateDatabases();

      await initPrefParameters();

      await scheduleDatabaseJobs();

      // Init Web Socket connection to systems if they exist (to get events)
      await customAxios.post(config.xtvision.url + "/home/subscribeSystems");
    })();

    app.disable("x-powered-by");
    // TODO to update when we know the max size of the image or datas (secure the backend and its perf of big files or big datas)
    app.use(express.json({ limit: "15mb" }));
    app.use(express.urlencoded({ extended: true }));
    // To accept Front requests
    const corsOptions = {
      origin: config.xtvision.cors,
      credentials: true,
      authenticate: true,
      authorization: true,
      optionsSuccessStatus: 200,
    };
    app.use(cors(corsOptions));
    // Front End path to use it
    if (process.env.NODE_ENV === NODE_ENV_PROD) {
      app.use(express.static(path.resolve(__dirname, "client/dist")));
    }
    app.use(morganMiddleware);
    app.use(checkAuthentication);
    app.use(userActionMiddleware);

    //database endpoints
    app.use("/", databaseApi(this.server));

    //  swagger route
    app.use(
      "/doc-database",
      swaggerUi.serve,
      swaggerUi.setup(swaggerFileDatabase)
    );
    // Files routes
    app.use("/", serverApi(this.server));

    app.use("/doc-server", swaggerUi.serve, swaggerUi.setup(swaggerFileServer));
  }

  start(): Promise<void> {
    return new Promise<void>((resolve, reject) => {
      this.init();
      this.server.once("error", (err) => {
        logger.error(err);
        reject(err);
      });
      this.server.listen(this.options.port, () => {
        logger.info(
          `${isHttpS ? "https" : "http"} server started with success on port ${
            this.options.port
          }`
        );
        resolve();
      });
    });
  }

  stop(): Promise<void> {
    logger.info("About to stop the server");
    return new Promise((resolve, reject) => {
      this.server.close(err => {
        if (err) {
          reject(err);
          return;
        }
        logger.info(
          `${isHttpS ? "https" : "http"} server stopped with success.`
        );
        resolve();
      });
    });
  }
}
